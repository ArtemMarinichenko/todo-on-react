{"version":3,"sources":["components/Display.jsx","components/Task.jsx","components/List.jsx","components/Form.jsx","components/Content.jsx","components/Navigation.jsx","components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","className","active","actual","Task","this","remove","text","marked","console","log","toggle","onClick","role","type","React","Component","List","arr","task","map","el","id","elProps","title","key","Form","state","titleChange","event","setState","target","value","onSubmit","preventDefault","add","placeholder","onChange","Content","idNum","arrTask","removeTask","idx","findIndex","slice","addTask","newTask","markedTask","oldTask","filter","length","Navigation","to","exact","About","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef0ec07f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Display = (props) => {\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Active tasks:</h1>\r\n\t\t\t\t<p>{props.active}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"actual\">\r\n\t\t\t\t<h3>Actual tasks:</h3>\r\n\t\t\t\t<p>{props.actual}</p>\r\n\t\t\t</div>\r\n\t\t</header>\r\n\t)\r\n}\r\n\r\nexport default Display;","import React from \"react\";\r\n\r\nclass Task extends React.Component {\r\n  // state = {\r\n  //   isMarked: false    \r\n  // }\r\n  // setMarked = () => {\r\n  //   this.setState ({\r\n  //     isMarked: !this.state.isMarked\r\n  //   })\r\n  // }\r\n  \r\n  \r\n  render() {\r\n    const {remove, text, marked, actual} = this.props;\r\n    console.log(actual);\r\n    let toggle = \"task\";\r\n    if( actual) {\r\n      toggle += \" marked\";      \r\n    } else {\r\n      toggle = \"task\"\r\n    }\r\n    \r\n    return (\r\n      // {this.state.isMarked ? \"task marked\" : \"task\"}\r\n      <div className={toggle}>\r\n        <div>{text}</div>\r\n        <div>\r\n          <button className=\"btn btn-success btn-sm mr-2\"\r\n                  onClick={marked}>\r\n                 <span role=\"img\">&#128293;</span></button>\r\n          <button type=\"button\" \r\n                  className=\"del btn btn-danger btn-sm\"\r\n                  onClick={remove}><span role=\"img\">&times;</span></button>\r\n        </div>    \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst List = ({arr, remove, actual}) => {\r\n  const task = arr.map((el) => {\r\n    const {id, ...elProps} = el;\r\n    return  (<Task text={el.title} \r\n                  {...elProps}\r\n                  key={id} \r\n                  remove={() => remove(id)}\r\n                  marked={() => actual(id)}\r\n             />)\r\n  })\r\n  return (\r\n    <div>\r\n      {task}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default List;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n  titleChange = (event) => {\r\n    this.setState ({\r\n      title: event.target.value\r\n    })\r\n  }\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.add(this.state.title);\r\n    this.setState ({\r\n      title: ''\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <form className=\"form\" onSubmit={this.onSubmit}>\r\n        <input type=\"text\"\r\n               placeholder=\"Add task\"\r\n               className=\"form-control\" \r\n               onChange={this.titleChange} \r\n               value={this.state.title} />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Display from \"./Display\";\r\nimport List from \"./List\";\r\nimport Form from \"./Form\";\r\n\r\nclass Content extends React.Component {\r\n  idNum = 100;\r\n  state = {\r\n    arrTask: [\r\n      { title: \"Task 1\", actual: false, id: 0 },\r\n      { title: \"Task 2\", actual: false, id: 1 },\r\n      { title: \"Task 3\", actual: false, id: 2 },\r\n    ],\r\n  };\r\n\r\n  removeTask = (id) => {\r\n    this.setState(({ arrTask }) => {\r\n      const idx = arrTask.findIndex((el) => el.id === id);\r\n      const newArr = [...arrTask.slice(0, idx), ...arrTask.slice(idx + 1)];\r\n      return {\r\n        arrTask: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  addTask = (title) => {\r\n    const newTask = {\r\n      title,\r\n      actual: false,\r\n      id: this.idNum++,\r\n    };\r\n    this.setState(({ arrTask }) => {\r\n      const newArr = [...arrTask, newTask];\r\n      return {\r\n        arrTask: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  markedTask = (id) => {\r\n    this.setState(({ arrTask }) => {\r\n      const idx = arrTask.findIndex((el) => el.id === id);\r\n\r\n      const oldTask = arrTask[idx];\r\n\r\n      const newTask = {\r\n        ...oldTask,\r\n        actual: !oldTask.actual,\r\n      };\r\n      console.log(newTask);\r\n      const newArr = [\r\n        ...arrTask.slice(0, idx),\r\n        newTask,\r\n        ...arrTask.slice(idx + 1),\r\n      ];\r\n      return {\r\n        arrTask: newArr,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const actual = this.state.arrTask.filter((el) => el.actual).length;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"app mt-4 \">\r\n          <Display active={this.state.arrTask.length} actual={actual} />\r\n          {this.state.arrTask.length ? (\r\n            <List\r\n              arr={this.state.arrTask}\r\n              remove={this.removeTask}\r\n              actual={this.markedTask}\r\n            />\r\n          ) : (\r\n            <p className=\"alert text-center\">no tasks</p>\r\n          )}\r\n          <Form add={this.addTask} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = (props) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark justify-content-start bg-primary\">\r\n      <div className=\"navbar-brand ml-4\">logo</div>\r\n      <ul className=\"collapse d-flex align-items-center mt-0 mb-0\">\r\n        <li className=\"nav-item active\">\r\n          <NavLink to=\"/\" exact className=\"nav-link\">App</NavLink>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <NavLink to=\"/about\" className=\"nav-link\">About</NavLink>\r\n        </li>       \r\n      </ul>  \r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\n\r\nconst About = (props) => {\r\n  return (\r\n    <div className=\"jumbotron container mt-4\">    \r\n      <h1 className=\"display-4\">Todo<span> react app...</span></h1>\r\n      <p className=\"lead\">Это пример простого реакт приложения.</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport Content from './components/Content'\nimport Navigation from './components/Navigation';\nimport About from './components/About';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Navigation /> \n        <Switch>\n          <Route path={\"/\"} exact component={Content} />                         \n          <Route path={\"/about\"} component={About} /> \n        </Switch>       \n      </BrowserRouter>\n    )        \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}